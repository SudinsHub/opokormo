______________________________________________________________
counting sort

int n, sum=0;
cin >> n;
int arr[n];
int ind[2000001] = {0};
for(int i=0; i<n; i++){
	cin >> arr[i];
	ind[arr[i]+1000000]++;
}
for(int i=0; i<2000001; i++){
    for(int j=0; j<ind[i]; j++){
	    cout << i-1000000 << " ";
    }
}


___________________________________________________
struct vector{
  int size;
  int maxSize;
  int* ptr;
  vector(){
    maxSize = 5;
    size = 0;
    ptr = (int*)calloc(maxSize, sizeof(int));
  }

  void push_back(int n){
    if(size >= maxSize){
      maxSize *= 2;
      ptr = (int*) realloc(ptr, maxSize);
    }
    ptr[size] = n;
    size++;
  }

};
_________________________________________________
void sieve(int n){
  for(long long i=2; i*i<=n; i++)
    if(arr[i]==0)
      for(long long j=2; i*j<=n; j++){
        arr[i*j] = 1;        
  }
  //print
  for(int i=2; i<=n; i++){
    if(arr[i] == 0) printf("%d ", i);
  }
}
___________________________________________________
int isPalindrome(char str[], int n){
  for(int i=0; i<n/2; i++)
    if(str[i] != str[n-1-i])
      return 0;
  return 1;
}
_____________________________________________________________________

void factorization(int n){
    while(n%2==0){
      printf("2 ");
      n/=2;
    }
  
  for(long long i=3; i*i<=n; i+=2){
      while(n%i==0){
        printf("%lld ", i);
        n/=i;
      }
  }
  if(n>2) printf("%d ", n);
  printf("\n");
}

___________________________________________________________________________

//counting sort O(n)
/*1st, counts the frequency of every element then stores every element according to the freq */
// mx is the biggest element in the array

vector<int> freq(mx+1, 0); // initially every element is 0
for(0 to n-1) freq[a[i]]++;

//O(mx - mn + 1) + O(n)
for(int )

  
__________________________________________________
// decending sort
sort(a, a+n, greater<int>());  //array
sort(v.rbegin(), v.rend()); //vector

//compare function
//true paile 1stare age rakhbe, false paile 2ndtare age

bool compare(pair<int, int> a, pair<int, int> b){
	if(a.first < a.second) return true;
	return false;
}

sort(a.begin(), a.end(), compare);
_______________________________________________________
//math.h needed
int revNum(int n, int arg){
    if(arg == 0) return n;
    return (n%10)*pow(10, arg) + revNum(n/10, arg-1); 
}

___________________________________________________________
int sumofnum (int n){
    if(n<10) return n;
    return  (n%10 + sumofnum(n/10));
}
________________________________________________
// recursive binary search

int binSearch(int arr[], int key, int hi, int low){

    if(hi < low) return -1;

    int mid = (hi+low)/2;
    
    if(arr[mid] == key){
        return mid;
    }
    else if(arr[mid] < key){
        low = mid+1;
        return binSearch(arr, key, hi, low);
    }
    else{
        hi = mid-1;
        return binSearch(arr, key, hi, low);
    }
} 
_____________________________

//binary search

mid=(high+low)/2;

__________________________________________________________

//BIg integer Sum

#include <stdio.h>
int max = 0;
int strLen(char a[]){
    int i = 0;
    while(a[i] != '\0') i++;
    if(i>max) max = i;
    return i;
}


int revStr(char straight[], char rev[]){
    int len = strLen(straight);
    for(int j = len-1; j>=0; j--){
        rev[len-j-1] = straight[j];
    }
}



int main() {
    char a[100];
    char result[100];
    char revResult[100];
    int n = 0;
    char reversed[50][100];
    while(scanf("%s", a) == 1 && a[0] != '0'){
        revStr(a, reversed[n]);    // this is how you can pass 2D array as a 1D array
        n++;
    }

    int i, curry = 0;
    for(i=0; i<max; i++){
        int sumBit = 0; 
        
        for(int j=0; j<n; j++){
            if(reversed[j][i] == '\0') reversed[j][i] = '0';
            sumBit += (reversed[j][i] - 48);
        }
        
        sumBit += curry;
        curry = sumBit/10;
        sumBit = sumBit % 10;
        result[i] = sumBit + 48;
        result[i+1] = '\0';
    }
    if(curry != 0) {
        result[i] = curry + 48;
        result[i+1] = '\0';
    }

    revStr(result, revResult);

    for(int j = 0; revResult[j] != '\0'; j++){
 
        printf("%c", revResult[j]);
        
    }
       

    return 0;
}
____________________________________________________________________________________________________________________

// SWAP

void swap(int* n, int* m){
    int temp = *n;
    *n = *m;
    *m = temp;
}

-------------------------------------------------------------------------------------------------------------------

void bubbleSortofStrings(char a[][100], int n, int ind[]){
    int swapped;
    for(int i = 0; i < n-1; i++){
        swapped = 0;
        for(int j = 0; j < n-i-1; j++){
            if(strcmp(a[ind[j]], a[ind[j+1]]) == 2){ // ind was initially 0, 1, 2,..., numOfGivenInputs-1
                swap(&ind[j], &ind[j+1]);
                swapped = 1;
            }
        }
        if(swapped == 0){
            break;
        }
    }
}

------------------------------------------------------------------------------------------------
// string compare
 /* 0 when equal, 1 when first one comes before and 2 when second one */

int strcmp(char a[], char b[]){
    int i=0;
    while(1){
        if (a[i] == '\0' && b[i] != '\0') return 1;
        else if (b[i] == '\0' && a[i] != '\0') return 2;
        else if (b[i] == '\0' && a[i] == '\0') return 0;
        
        if(a[i] > b[i]) return 2;
        else if(a[i] < b[i]) return 1;
        else if(a[i] == b[i]) i++;
    }
}

-----------------------------------------------------------------------------------------------------------------
// check if the number is prime

int isPrime(int n){
    if(n<2) return 0;
    for(long long i = 2; i*i <= n; i++){
        if(n%i == 0) return  0;
    }
    return 1;
}
----------------------------------------------------------------------------------------------------------------

//multiplication of 2 matrices
// [m][p] x [p][n]
 for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            for (int k = 0; k < p; k++){
                c[i][j] += (a[i][k] * b[k][j]); // c is a matrix with all zeros
            }
            
        }
        
  }



----------------------------------------------------------------------------------------------------------------------- 


//return the largest subarray sum Kadane's algorithm[O(N)]
int printLargestSubarray3(int arr[],int n){
    int currentSum=0;
    int largestSum=0;
    for(int i=0;i<n;i++){
        currentSum += arr[i];
        if(currentSum<0){
            currentSum=0;
        }
        largestSum=max(largestSum,currentSum);
    }
    return largestSum;
}


// maximum sub array sum 

#include <stdio.h>

int main() {
    long long sum = -10000000000;
    int n = 7, size = 0, fst, lst;
    // scanf("%d", &n);
    int arr[n+1] = {0}, cum[n+1] = {0};

    for(int i = 1; i <= n; i++){
        scanf("%d", &arr[i]);
        cum[i] = arr[i] + cum[i-1];
    }

    while(size < n){
        for (int i = 1; i + size < n; i++){
            if(cum [i+size] - cum[i-1] >= sum ){ // here the equal sign ensures maximum legnth of the sub-array
            sum = cum [i+size] - cum[i-1]; 
            lst = i + size;
            fst = i;
            }
        }
        size++;
    }

  
    printf("%lld\n", sum);

    for(int i = fst; i <= lst; i++){
        printf("%d ", arr[i]);    
    }
    return 0;
}




--------------------------------------------------------------------------------------------------------------------

//sortings

#include <stdio.h>
#include <stdbool.h>

void swap(int* n, int* m){
    int temp = *n;
    *n = *m;
    *m = temp;
}

void insertionSort(int arr[], int n){
    for(int i = 0; i < n-1; i++){
        if(arr[i] > arr[i+1]) {
            swap(&arr[i], &arr[i+1]);
            for(int j = i; j>=0; j--){
                if(arr[j] < arr[j-1]) 
                    swap(&arr[j], &arr[j-1]);
                else{
                    break;
                }
            }
        }
    }
}

void selectionSort(int arr[], int n){
    for(int i = 0; i < n-1; i++){
        // int minVal = arr[i];
        int j, minIndex = i;
        for(j= i+1; j < n; j++){
            if(arr[minIndex] > arr[j])
                minIndex = j; //break;??
        }
        if(minIndex != i)
            swap(&arr[i], &arr[minIndex]);
    }
    
}

void bubbleSort(int arr[], int n){
    bool swapped;
    for(int i = 0; i < n-1; i++){
        swapped = false;
        for(int j = 0; j < n-i-1; j++){
            if(arr[j] > arr[j+1]){
                swap(&arr[j], &arr[j+1]);
                swapped = true;
            }
        }
        if(swapped == false){
            break;
        }
    }
}

int main() {
    printf("Size of the array: ");
    int n;
    scanf("%d", &n);
    int arr[n];
    
    for(int i=0; i<n; i++){
        scanf("%d", &arr[i]);
    }
    
    bubbleSort(arr, n);
    
    for(int i=0; i<n; i++){
        printf("%d ", arr[i]);
    }
    
    return 0;
}

--------------------------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;

bool compare(pair<int, int> a, pair<int, int> b){
    return a.second < b.second;
}

int main() {
    int n;
    cin >> n;
    pair<int, int> arr[n];
    for(int i=0; i<n; i++){
        int m;
        cin >> m;
        arr[i] = make_pair(i+1, m);
    }
    
    sort(arr, arr+n, compare);
    
    int diff, ind1, ind2, preDiff = abs(arr[0].second - arr[1].second);
    
    for(int i=0; i<n-1; i++){
        diff = abs(arr[i].second - arr[i+1].second);
        if(diff <= prediff){
            ind1 = arr[i].first;
            ind2 = arr[i+1].first;
        }
    }
    
    cout << ind1 << ' ' << ind2 << endl;
    
     return 0;
}


-------------------------------------------------------------------


------------------------------------------------------------------------------------------------
#include <bits/stdc++.h>
using namespace std;

int main() {
    int t;
    cin >> t;
    for(int m=1;m <= t; m++){
        int n, k, flag, result = 0;
        cin >> n >> k;
        int lst = n;
        int sec_lst;
        int trd_lst;
        for(int j=ceil((float)n/2); j<n; j++){
            sec_lst = j;
            flag = 2;
            while(trd_lst <= 0){
                trd_lst = lst - sec_lst;
                lst = sec_lst;
                sec_lst = trd_lst;
                flag ++;
                if(flag == k) {
                    result ++;
                    break;}
            }
            
        }
        cout << result << endl;
    }
    return 0;
}


#include<bits/stdc++.h>

using namespace std;
 
int main() {
    int n, m, mx_gear;
    int arr[n], _arr[m];
    cin >> n;
    for(int i=0; i<n; i++){
        cin >> arr[i];    
    }
    
    cin >> m;
    for(int i=0; i<m; i++){
        cin >> _arr[i];    
    }
    for(int i=0; i < m; i++){
        for(int j=m-1; j >=0; j--){
            if(_arr[i] % arr[j]  == 0){
                mx_gear = _arr[i] / arr[j];
                break;
            }
        }
    }
    
    
    return 0;
}


// Online C++ compiler to run C++ program online
#include <bits/stdc++.h>
using namespace std;

int main() {
    // Write C++ code here
    int t;
    cin >> t;
    for(int i = 0; i < t; i++){
        string arr;
        cin >> arr;
        int flag = 0;
        arr = '0' + arr;
        
        for(int i=0; i+1 != '\0'; i++){
            if(flag == 0){
                if(arr[i+1] >= '5') {
                    arr[i]++;
                    flag = 1;
                }
                else if(arr[i+1] = '4') continue;
                else{
                        
                }
            } else{
                
            }
        }
        if(sum % 2 == 0) cout << "YES" << endl;
        else cout << "NO" << endl;
    }

    return 0;
}



echo "# web-automation-using-proxy-and-chrome-debug-SudinsHub" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/cea-classes/web-automation-using-proxy-and-chrome-debug-SudinsHub.git
git push -u origin main